"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getActionName = getActionName;
exports.assignCrudMethod = assignCrudMethod;
exports.apiActions = apiActions;

var _utils = require("./utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * Utility function that return the name of the action from the
 * constant.
 *
 * @param {number} action - Action constant
 *
 * @returns {string} action - Action name
 */
function getActionName(action) {
    switch (action) {
        case _utils.CREATE:
            return "create";
        case _utils.READ:
            return "read";
        case _utils.UPDATE:
            return "update";
        case _utils.DELETE:
            return "delete";
        case _utils.LIST:
            return "list";
        case _utils.POST:
            return "post";
        default:
            throw Error("action is invalid");
    }
}

/**
 * Utility function for assigning an API method to an action
 *
 * @param {Object} actions - Actions object as generated by apiActions
 * @param {function} apiMethod - An api method that take a context
 * object as parameter (payload of the action)
 * @param {number} action - One of (CREATE, READ, UPDATE, DELETE, LIST, POST)
 *
 * @returns {function} - Redux Action that dispatch a api sequence (request, success or failure).
 */
function assignCrudMethod(actions, apiMethod, action) {
    var _this = this;

    // Get request, success, failure actions
    var actionName = getActionName(action);
    var REQUEST = actions[actionName + "Request"];
    var SUCCESS = actions[actionName + "Success"];
    var FAILURE = actions[actionName + "Failure"];
    return function (args) {
        return function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {
                var response;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                dispatch(REQUEST(args));
                                _context.prev = 1;
                                _context.next = 4;
                                return apiMethod(args);

                            case 4:
                                response = _context.sent;

                                dispatch(SUCCESS(response.status, response.data));
                                _context.next = 11;
                                break;

                            case 8:
                                _context.prev = 8;
                                _context.t0 = _context["catch"](1);

                                dispatch(FAILURE(_context.t0.response.status, _context.t0.response.data));

                            case 11:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, _this, [[1, 8]]);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }();
    };
}

/**
 * Utility function for CRUDLP actions.
 *
 * @param {string} resource - Name of the resource with prefix
 * @param {string} action - One of (CREATE, READ, UPDATE, DELETE, LIST, POST)
 *
 * @returns {Object} actions - Actions type and methods.
 */
function getGroup(resource, action) {
    var _ref2;

    var funcName = "" + action.toLowerCase();
    return _ref2 = {}, _defineProperty(_ref2, action + "_REQUEST", resource + "_" + action + "_REQUEST"), _defineProperty(_ref2, funcName + "Request", function undefined(payload) {
        return {
            type: resource + "_" + action + "_REQUEST",
            payload: payload
        };
    }), _defineProperty(_ref2, action + "_SUCCESS", resource + "_" + action + "_SUCCESS"), _defineProperty(_ref2, funcName + "Success", function undefined(statusCode, data) {
        return {
            type: resource + "_" + action + "_SUCCESS",
            payload: {
                data: data,
                statusCode: statusCode
            }
        };
    }), _defineProperty(_ref2, action + "_FAILURE", resource + "_" + action + "_FAILURE"), _defineProperty(_ref2, funcName + "Failure", function undefined(statusCode, data) {
        return {
            type: resource + "_" + action + "_FAILURE",
            payload: {
                data: data,
                statusCode: statusCode
            }
        };
    }), _ref2;
}

/**
 * Return actions for a resource and a list of CRUDLP methods.
 *
 * @param {string} resource - Name of the resource with prefix
 * @param {number} methods - Combinaison of (CREATE, READ, UPDATE, DELETE, LIST, POST)
 *
 * @returns {Object} redux actions for resource and methods.
 */
function apiActions(resource) {
    var methods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (resource === null) throw new Error("Expected resource");
    if (resource.trim() === "") throw new Error("Expected resource");

    // Initialize with basic actions.
    var actions = {
        SET_ITEM: resource + "_SET_ITEM",
        setItem: function setItem(payload) {
            return {
                type: resource + "_SET_ITEM",
                payload: payload
            };
        },
        CLEAR_ITEM: resource + "_CLEAR_ITEM",
        clearItem: function clearItem() {
            return {
                type: resource + "_CLEAR_ITEM"
            };
        },
        CLEAR_ERRORS: resource + "_CLEAR_ERRORS",
        clearErrors: function clearErrors() {
            return {
                type: resource + "_CLEAR_ERRORS"
            };
        }
    };

    // CREATE
    if (methods & _utils.CREATE) {
        actions = _extends({}, actions, getGroup(resource, "CREATE"));
    }
    // READ
    if (methods & _utils.READ) {
        actions = _extends({}, actions, getGroup(resource, "READ"));
    }
    // UPDATE
    if (methods & _utils.UPDATE) {
        actions = _extends({}, actions, getGroup(resource, "UPDATE"));
    }
    // DELETE
    if (methods & _utils.DELETE) {
        actions = _extends({}, actions, getGroup(resource, "DELETE"));
    }
    // LIST
    if (methods & _utils.LIST) {
        actions = _extends({}, actions, getGroup(resource, "LIST"));
    }
    // POST
    if (methods & _utils.POST) {
        actions = _extends({}, actions, getGroup(resource, "POST"));
    }

    return actions;
}